// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simpleexample.proto

package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SimpleExampleEvent struct {
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (m *SimpleExampleEvent) Reset()                    { *m = SimpleExampleEvent{} }
func (m *SimpleExampleEvent) String() string            { return proto1.CompactTextString(m) }
func (*SimpleExampleEvent) ProtoMessage()               {}
func (*SimpleExampleEvent) Descriptor() ([]byte, []int) { return fileDescriptorSimpleexample, []int{0} }

func (m *SimpleExampleEvent) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func init() {
	proto1.RegisterType((*SimpleExampleEvent)(nil), "proto.SimpleExampleEvent")
}
func (m *SimpleExampleEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovSimpleexample(uint64(l))
	}
	return n
}

func sovSimpleexample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSimpleexample(x uint64) (n int) {
	return sovSimpleexample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func init() { proto1.RegisterFile("simpleexample.proto", fileDescriptorSimpleexample) }

var fileDescriptorSimpleexample = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0xce, 0xcc, 0x2d,
	0xc8, 0x49, 0x4d, 0xad, 0x48, 0x04, 0x51, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60,
	0x4a, 0x4a, 0x37, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x3d, 0x3f,
	0x3d, 0x5f, 0x1f, 0x2c, 0x9c, 0x54, 0x9a, 0x06, 0xe6, 0x81, 0x39, 0x60, 0x16, 0x44, 0x97, 0x92,
	0x16, 0x97, 0x50, 0x30, 0xd8, 0x30, 0x57, 0x88, 0x61, 0xae, 0x65, 0xa9, 0x79, 0x25, 0x42, 0x22,
	0x5c, 0xac, 0x25, 0x89, 0x49, 0x39, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e,
	0x93, 0xe5, 0x89, 0x47, 0x72, 0x0c, 0x17, 0x1e, 0xc9, 0x31, 0x3c, 0x78, 0x24, 0xc7, 0x18, 0xa5,
	0x8d, 0x64, 0x51, 0x71, 0x62, 0x6e, 0x71, 0x62, 0x51, 0x62, 0x46, 0xa1, 0x7e, 0x49, 0x46, 0x69,
	0x5e, 0x4a, 0x6a, 0x91, 0x7e, 0x66, 0x5e, 0x49, 0x6a, 0x51, 0x5e, 0x62, 0x0e, 0xd4, 0x7a, 0x36,
	0x30, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x52, 0x71, 0xc3, 0xb7, 0xba, 0x00, 0x00, 0x00,
}
